/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * API
 * API description
 * OpenAPI spec version: 1.0
 */
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import { useInfiniteQuery, useQuery } from "react-query";
import type { UserEntity } from ".././models";
import type { ErrorType } from "../../mutator/custom-client";
import { useCustomClient } from "../../mutator/custom-client";

export const useUsersFindAllHook = () => {
  const usersFindAll = useCustomClient<UserEntity[]>();

  return (signal?: AbortSignal) => {
    return usersFindAll({ url: `/api/users`, method: "get", signal });
  };
};

export const getUsersFindAllQueryKey = () => [`/api/users`];

export type UsersFindAllInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>
>;
export type UsersFindAllInfiniteQueryError = ErrorType<unknown>;

export const useUsersFindAllInfinite = <
  TData = Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>,
    TError,
    TData
  >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersFindAllQueryKey();

  const usersFindAll = useUsersFindAllHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>
  > = ({ signal }) => usersFindAll(signal);

  const query = useInfiniteQuery<
    Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>,
    TError,
    TData
  >({ queryKey, queryFn, ...queryOptions }) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type UsersFindAllQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>
>;
export type UsersFindAllQueryError = ErrorType<unknown>;

export const useUsersFindAll = <
  TData = Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersFindAllQueryKey();

  const usersFindAll = useUsersFindAllHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>
  > = ({ signal }) => usersFindAll(signal);

  const query = useQuery<
    Awaited<ReturnType<ReturnType<typeof useUsersFindAllHook>>>,
    TError,
    TData
  >({ queryKey, queryFn, ...queryOptions }) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const useUsersFindOneHook = () => {
  const usersFindOne = useCustomClient<UserEntity>();

  return (id: number, signal?: AbortSignal) => {
    return usersFindOne({ url: `/api/users/${id}`, method: "get", signal });
  };
};

export const getUsersFindOneQueryKey = (id: number) => [`/api/users/${id}`];

export type UsersFindOneInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>
>;
export type UsersFindOneInfiniteQueryError = ErrorType<unknown>;

export const useUsersFindOneInfinite = <
  TData = Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>,
      TError,
      TData
    >;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersFindOneQueryKey(id);

  const usersFindOne = useUsersFindOneHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>
  > = ({ signal }) => usersFindOne(id, signal);

  const query = useInfiniteQuery<
    Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>,
    TError,
    TData
  >({
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type UsersFindOneQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>
>;
export type UsersFindOneQueryError = ErrorType<unknown>;

export const useUsersFindOne = <
  TData = Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersFindOneQueryKey(id);

  const usersFindOne = useUsersFindOneHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>
  > = ({ signal }) => usersFindOne(id, signal);

  const query = useQuery<
    Awaited<ReturnType<ReturnType<typeof useUsersFindOneHook>>>,
    TError,
    TData
  >({ queryKey, queryFn, enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
